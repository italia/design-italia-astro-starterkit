---
const props = Astro.props;
console.log("hero", props);
const { title, text, link, show, image } = props;
---

<style lang="scss">
  .rating {
    position: relative;
    width: 100%;
    min-height: 300px;
    overflow: hidden;
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    background-position: center;
    background-size: cover;
    background-repeat: no-repeat;
  }

  .rating-wrapper {
    background-color: var(--bs-card-bg);
    max-width: 640px;
    padding: 2rem;
    margin: 0 auto;
  }

  .rating-stars {
    display: flex;
    gap: 0.5rem;

    .star-container {
      position: relative;
      width: 24px;
      height: 24px;
      cursor: pointer;
    }

    .rating-star-full {
      position: absolute;
      top: 0;
      left: 0;
      opacity: 0;
      transition: opacity 0.2s ease;
    }

    .rating-star-outline {
      position: absolute;
      top: 0;
      left: 0;
      opacity: 1;
      transition: opacity 0.2s ease;
    }

    .star-container:hover ~ .star-container {
      .rating-star-full {
        opacity: 0;
      }
      .rating-star-outline {
        opacity: 1;
      }
    }

    .star-container:hover,
    .star-container:hover ~ .star-container:hover {
      .rating-star-full {
        opacity: 1;
      }
      .rating-star-outline {
        opacity: 0;
      }
    }

    .star-container.selected {
      .rating-star-full {
        opacity: 1;
      }
      .rating-star-outline {
        opacity: 0;
      }
    }
  }
</style>

<section class="rating bg-primary">
  <div class="container">
    <div class="rating-wrapper">
      <div class="text-black">
        <h5>{title}</h5>
      </div>
      <div class="rating-stars" id="ratingStars">
        <div class="star-container" data-rating="1">
          <svg class="icon icon-sm icon-primary rating-star-outline"
            ><use xlink:href="bsi-svg/sprites.svg#it-star-outline"></use>
          </svg>
          <svg class="icon icon-sm icon-primary rating-star-full"
            ><use xlink:href="bsi-svg/sprites.svg#it-star-full"></use>
          </svg>
        </div>
        <div class="star-container" data-rating="2">
          <svg class="icon icon-sm icon-primary rating-star-outline"
            ><use xlink:href="bsi-svg/sprites.svg#it-star-outline"></use>
          </svg>
          <svg class="icon icon-sm icon-primary rating-star-full"
            ><use xlink:href="bsi-svg/sprites.svg#it-star-full"></use>
          </svg>
        </div>
        <div class="star-container" data-rating="3">
          <svg class="icon icon-sm icon-primary rating-star-outline"
            ><use xlink:href="bsi-svg/sprites.svg#it-star-outline"></use>
          </svg>
          <svg class="icon icon-sm icon-primary rating-star-full"
            ><use xlink:href="bsi-svg/sprites.svg#it-star-full"></use>
          </svg>
        </div>
        <div class="star-container" data-rating="4">
          <svg class="icon icon-sm icon-primary rating-star-outline"
            ><use xlink:href="bsi-svg/sprites.svg#it-star-outline"></use>
          </svg>
          <svg class="icon icon-sm icon-primary rating-star-full"
            ><use xlink:href="bsi-svg/sprites.svg#it-star-full"></use>
          </svg>
        </div>
        <div class="star-container" data-rating="5">
          <svg class="icon icon-sm icon-primary rating-star-outline"
            ><use xlink:href="bsi-svg/sprites.svg#it-star-outline"></use>
          </svg>
          <svg class="icon icon-sm icon-primary rating-star-full"
            ><use xlink:href="bsi-svg/sprites.svg#it-star-full"></use>
          </svg>
        </div>
      </div>
    </div>
  </div>
  <!-- - overlay-->
  <div class="bg-overlay"></div>
</section>

<script>
  const ratingStars = document.getElementById('ratingStars');
  if (ratingStars) {
    const stars = ratingStars.querySelectorAll('.star-container');
    let selectedRating = 0;

    stars.forEach((star, index) => {
      star.addEventListener('mouseenter', () => {
        stars.forEach((s, i) => {
          if (i <= index) {
            s.classList.add('selected');
          } else {
            s.classList.remove('selected');
          }
        });
      });

      star.addEventListener('click', () => {
        selectedRating = index + 1;
        stars.forEach((s, i) => {
          if (i < selectedRating) {
            s.classList.add('selected');
          } else {
            s.classList.remove('selected');
          }
        });
      });
    });

    ratingStars.addEventListener('mouseleave', () => {
      stars.forEach((star, index) => {
        if (index >= selectedRating) {
          star.classList.remove('selected');
        }
      });
    });
  }
</script>
